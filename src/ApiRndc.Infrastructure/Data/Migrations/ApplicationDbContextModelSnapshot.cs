// <auto-generated />
using System;
using ApiRndc.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiRndc.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApiRndc.Domain.Entities.Manifiesto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AceptacionElectronica")
                        .HasColumnType("text");

                    b.Property<string>("CodIdConductor")
                        .HasColumnType("text");

                    b.Property<string>("CodIdConductor2")
                        .HasColumnType("text");

                    b.Property<string>("CodIdTitularManifiesto")
                        .HasColumnType("text");

                    b.Property<string>("CodMunicipioDestinoManifiesto")
                        .HasColumnType("text");

                    b.Property<string>("CodMunicipioOrigenManifiesto")
                        .HasColumnType("text");

                    b.Property<string>("CodMunicipioPagoSaldo")
                        .HasColumnType("text");

                    b.Property<string>("CodOperacionTransporte")
                        .HasColumnType("text");

                    b.Property<string>("CodResponsablePagoCargue")
                        .HasColumnType("text");

                    b.Property<string>("CodResponsablePagoDescargue")
                        .HasColumnType("text");

                    b.Property<string>("ConsecutivoInformacionViaje")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaExpedicionManifiesto")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaPagoSaldoManifiesto")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IngresoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ManNroManifiestoTransbordo")
                        .HasColumnType("text");

                    b.Property<string>("NitMonitoreoFlota")
                        .HasColumnType("text");

                    b.Property<string>("NumIdConductor")
                        .HasColumnType("text");

                    b.Property<string>("NumIdConductor2")
                        .HasColumnType("text");

                    b.Property<string>("NumIdTitularManifiesto")
                        .HasColumnType("text");

                    b.Property<string>("NumManifiestoCarga")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumNitEmpresaTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumPlaca")
                        .HasColumnType("text");

                    b.Property<string>("NumPlacaRemolque")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("RemesasAsociadas")
                        .HasColumnType("text");

                    b.Property<decimal?>("RetencionFuenteManifiesto")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RetencionIcaManifiestoCarga")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<decimal?>("ValorAnticipoManifiesto")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ValorFletePactadoViaje")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IngresoId");

                    b.HasIndex("NumManifiestoCarga");

                    b.ToTable("manifiestos", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.ManifiestoRemesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConsecutivoRemesa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ManifiestoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RemesaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManifiestoId");

                    b.HasIndex("RemesaId");

                    b.ToTable("manifiesto_remesas", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.Remesa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("CantidadCargada")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CantidadProducto")
                        .HasColumnType("numeric");

                    b.Property<string>("CodNaturalezaCarga")
                        .HasColumnType("text");

                    b.Property<string>("CodOperacionTransporte")
                        .HasColumnType("text");

                    b.Property<string>("CodSedeDestinatario")
                        .HasColumnType("text");

                    b.Property<string>("CodSedePropietario")
                        .HasColumnType("text");

                    b.Property<string>("CodSedeRemitente")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoEmpaque")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdDestinatario")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdPropietario")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdRemitente")
                        .HasColumnType("text");

                    b.Property<string>("CodigoArancelCode")
                        .HasColumnType("text");

                    b.Property<string>("CodigoUn")
                        .HasColumnType("text");

                    b.Property<string>("CompaniaSeguro")
                        .HasColumnType("text");

                    b.Property<string>("ConsecutivoInformacionCarga")
                        .HasColumnType("text");

                    b.Property<string>("ConsecutivoRemesa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("DescripcionCortaProducto")
                        .HasColumnType("text");

                    b.Property<string>("DuenoPoliza")
                        .HasColumnType("text");

                    b.Property<string>("EstadoMercancia")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaCitaPactadaCargue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaCitaPactadaDescargue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaVencimientoPolizaCarga")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrupoEmbalajeEnvase")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("HoraCitaPactadaCargue")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("HoraCitaPactadaDescargueRemesa")
                        .HasColumnType("interval");

                    b.Property<int?>("HorasPactoCarga")
                        .HasColumnType("integer");

                    b.Property<int?>("HorasPactoDescargue")
                        .HasColumnType("integer");

                    b.Property<string>("IngresoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MercanciaRemesa")
                        .HasColumnType("text");

                    b.Property<int?>("MinutosPactoCarga")
                        .HasColumnType("integer");

                    b.Property<int?>("MinutosPactoDescargue")
                        .HasColumnType("integer");

                    b.Property<string>("NumIdDestinatario")
                        .HasColumnType("text");

                    b.Property<string>("NumIdGps")
                        .HasColumnType("text");

                    b.Property<string>("NumIdPropietario")
                        .HasColumnType("text");

                    b.Property<string>("NumIdRemitente")
                        .HasColumnType("text");

                    b.Property<string>("NumNitEmpresaTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumPolizaTransporte")
                        .HasColumnType("text");

                    b.Property<string>("OrdenServicioGenerador")
                        .HasColumnType("text");

                    b.Property<string>("PermisoCargaExtra")
                        .HasColumnType("text");

                    b.Property<decimal?>("PesoContenedorVacio")
                        .HasColumnType("numeric");

                    b.Property<string>("SubpartidaCode")
                        .HasColumnType("text");

                    b.Property<string>("UnidadMedidaCapacidad")
                        .HasColumnType("text");

                    b.Property<string>("UnidadMedidaProducto")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConsecutivoRemesa");

                    b.HasIndex("IngresoId");

                    b.ToTable("remesas", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.RndcTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IngresoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NitEmpresaTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RequestXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResponseXml")
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SuccessAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IngresoId");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionType");

                    b.ToTable("rndc_transactions", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.Tercero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CodCategoriaLicenciaConduccion")
                        .HasColumnType("text");

                    b.Property<string>("CodMunicipioRndc")
                        .HasColumnType("text");

                    b.Property<string>("CodSedeTercero")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdTercero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaVencimientoLicencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IngresoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitud")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitud")
                        .HasColumnType("numeric");

                    b.Property<string>("NomIdTercero")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NomSedeTercero")
                        .HasColumnType("text");

                    b.Property<string>("NomenclaturaDireccion")
                        .HasColumnType("text");

                    b.Property<string>("NumIdTercero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumLicenciaConduccion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumNitEmpresaTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumTelefonoContacto")
                        .HasColumnType("text");

                    b.Property<string>("PrimerApellidoIdTercero")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RegimenSimple")
                        .HasColumnType("text");

                    b.Property<string>("SegundoApellidoIdTercero")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngresoId");

                    b.HasIndex("NumIdTercero");

                    b.ToTable("terceros", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.Vehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AnoFabricacionVehiculoCarga")
                        .HasColumnType("integer");

                    b.Property<string>("CodColorVehiculoCarga")
                        .HasColumnType("text");

                    b.Property<string>("CodConfiguracionUnidadCarga")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodLineaVehiculoCarga")
                        .HasColumnType("text");

                    b.Property<string>("CodMarcaVehiculoCarga")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoCarroceria")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoCombustible")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdPropietario")
                        .HasColumnType("text");

                    b.Property<string>("CodTipoIdTenedor")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaVencimientoSoat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IngresoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NumIdPropietario")
                        .HasColumnType("text");

                    b.Property<string>("NumIdTenedor")
                        .HasColumnType("text");

                    b.Property<string>("NumNitAseguradoraSoat")
                        .HasColumnType("text");

                    b.Property<string>("NumNitEmpresaTransporte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumPlaca")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NumSeguroSoat")
                        .HasColumnType("text");

                    b.Property<decimal?>("PesoVehiculoVacio")
                        .HasColumnType("numeric");

                    b.Property<string>("UnidadMedidaCapacidad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngresoId");

                    b.HasIndex("NumPlaca")
                        .IsUnique();

                    b.ToTable("vehiculos", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "public");
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.ManifiestoRemesa", b =>
                {
                    b.HasOne("ApiRndc.Domain.Entities.Manifiesto", "Manifiesto")
                        .WithMany("ManifiestoRemesas")
                        .HasForeignKey("ManifiestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiRndc.Domain.Entities.Remesa", "Remesa")
                        .WithMany()
                        .HasForeignKey("RemesaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manifiesto");

                    b.Navigation("Remesa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiRndc.Domain.Entities.Manifiesto", b =>
                {
                    b.Navigation("ManifiestoRemesas");
                });
#pragma warning restore 612, 618
        }
    }
}
